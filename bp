#!/usr/bin/env bash

export ETH_FROM=0x16Fb96a5fa0427Af0C8F7cF1eB4870231c8154B6
export ETH_RPC_URL=127.0.0.1:2000
export ETH_GAS=7000000
export SOLC_FLAGS="--optimize optimize-runs=200"
export ETH_RPC_ACCOUNTS=yes
export SETH_ASYNC=yes

ONE_ETH=$((10**18))

. ./scripts/function.sh 

JSON_FILE=config/bprotocol_testchain.json
export JSON_FILE=$JSON_FILE
json ".B_CDP_MANAGER" || B_CDP_MANAGER=$RESULT

JSON_FILE=config/mcd_testchain.json
export JSON_FILE=$JSON_FILE
json ".MCD_JOIN_ETH_A" || ETH_JOIN=$RESULT
json ".PIP_ETH" || PIP_ETH=$RESULT

usage="$(basename "$0") <OPTIONS>
Script to execute operations on B.Protocol.
The command requires \"seth\" installed and required environment variables set.

where:

OPTIONS:
   open <ink> <art>     :Opens a new CDP with (ink * 10^18) deposit and (art * 10^18) debt.
   pokeNext <price>     :Poke next rate (price * 10^18) for PIP_ETH.src()
"

validInt() {
   test -z $1 && echo $2 && exit 1
   test $1 -eq 0 && echo $2 && exit 1
}

validateTx() {
   test -z $1 && echo "no transaction id" && exit 1
   test $(seth receipt $1 status) -eq 0 && echo "$2 TX FAILED: $1" && exit 1
}

openCdp() {
   validInt "$1" "invalid ethAmount"
   validInt "$2" "invalid artAmount"
   ink=$(echo "$1 * $ONE_ETH" | bc)
   art=$(echo "$2 * $ONE_ETH" | bc)
   
   echo "Opening new CDP from user $ETH_FROM ..."
   echo "ETHAmount: $1 ETH = $ink"
   echo "ARTAmount: $2 DAI = $art"

   # BCdpManager.open()
   toBytes32 "ETH-A" && ILK_ETH=$RESULT
   cdp=$(seth call $B_CDP_MANAGER 'open(bytes32,address)' $ILK_ETH $ETH_FROM | seth --to-dec)
   validInt "$cdp" "CDP not created"
   TX=$(seth send $B_CDP_MANAGER 'open(bytes32,address)' $ILK_ETH $ETH_FROM)
   validateTx $TX
   echo "CDP Number created: $cdp"

   # WETH.mint()
   gem=$(seth call $ETH_JOIN 'gem()(address)');
   TX=$(seth send $gem 'deposit()' --value $ink)
   validateTx $TX "WETH.mint()"
   bal=$(seth call $gem 'balanceOf(address)' $ETH_FROM)

   # WETH.approve()
   TX=$(seth send $gem 'approve(address,uint256)' $ETH_JOIN $ink)
   validateTx $TX "WETH.approve()"

   # ethJoin.join()
   urn=$(seth call $B_CDP_MANAGER 'urns(uint256)(address)' $cdp)
   TX=$(seth send $ETH_JOIN 'join(address,uint256)' $urn $ink)
   validateTx $TX "ethJoin.join()"

   # BCdpManager.frob()
   TX=$(seth send $B_CDP_MANAGER 'frob(uint256,int256,int256)' $cdp $ink $art)
   validateTx $TX "BCdpManager.frob()"
   echo "Done."

   cdpInfo $cdp
}

cdpInfo() {
   cdp=$1
   echo "CDP Info:"
   echo "cdp: $cdp"
   urn=$(seth call $B_CDP_MANAGER 'urns(uint256)(address)' $cdp)
   echo "urn: $urn"
   own=$(seth call $B_CDP_MANAGER 'owns(uint256)(address)' $cdp)
   echo "own: $own"
   ilk=$(seth call $B_CDP_MANAGER 'ilks(uint256)(bytes32)' $cdp)
   echo "ilk: $(seth --to-ascii $ilk)"
}

# Change osm price for next hour
pokeNext() {
   # Use `bc` for big numbers
   newPrice=$(echo "$1 * $ONE_ETH" | bc)
   # Print current rate
   # PIP_ETH.src()
   echo "PIP_ETH = $PIP_ETH"
   value=$(seth call $PIP_ETH 'src()(address)')
   echo "DSValue = $value"
   
   # DSValue.peek()
   peek=$(seth call $value 'peek()(bytes32)' | seth --to-dec)
   echo "DSValue.peek() = $peek"

   # DSValue.poke()
   wut=$(seth --to-uint256 $newPrice | seth --to-bytes32)
   TX=$(seth send $value 'poke(bytes32)' $wut)
   validateTx $TX "DSValue.poke()"
   echo "DSValue.poke() = $newPrice"

   # DSValue.peek()
   peek=$(seth call $value 'peek()(bytes32)' | seth --to-dec)
   echo "DSValue.peek() = $peek"
}

# TODO Advance time (we should calc how much to advance)
advanceTime() {
   # Support units like `1 mins / hours / days / weeks`
   echo "Advance time"
}

# TODO Change medianizer price
med() {
   echo "Med"
}

case "$1" in
   open)
      openCdp $2 $3
      ;;
   info)
      cdpInfo $2
      ;;
   pokeNext)
      pokeNext $2
      ;;
   advTime)
      advanceTime
      ;;
   *)
      echo "$usage"
      exit 1
      ;;
esac
